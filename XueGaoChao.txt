This is the first Demo
2018.11.10
推荐系统
一.协同过滤
1.收集用户偏好
2.找到相似的用户或物品
3.计算推荐
相似度计算：
欧几里得距离、皮尔逊相关系数、Cosine相似度、
协方差
基于用户的协同过滤要解决的问题
已知用户评分矩阵MatrixR 一般都是非常稀疏的
推断矩阵中空格empty cells处的值

基于用户的协同过滤为啥不流行？
1.稀疏问题
2.数百万的用户计算，量大
3.人的喜好爱好是多变的
基于物品的协同过滤优势？
1.计算性能高，通常用户数量远大于物品数量
2.可预先计算保留，物品并不善变

用户冷启动问题
1.引导用户吧自己的一些属性表达出来
2.利用现有的开放数据平台
3.根据用户注册属性
4.推荐排行榜单

物品冷启动问题
1.文本分析
2.主题模型
3.打标签
4.推荐排行榜单

隐语义模型
1.从数据出发，进行个性化推荐
2.用户和物品之间有着隐含的联系
3.隐含因子让计算机能理解就好
4.将用户和物品通过中介隐含因子联系起来

隐语义模型模型
梯度下降方向、迭代求解
模型评估：
准确率、召回率
评估指标：
覆盖率、多样性

运行了movie_recommender项目的data_download.py和data_processing.py
解决了小bug
正常运行

2018.11.02

对推荐系统进行分析
将movie数据、user数据、rating数据分别进行预处理，然后组成一个大table
最后将table分割，得到features和target


对用户和电影分别进行神经网络处理，从嵌入层、到卷积层、最后经过两个全连接层输出1*200的用户特征
电影名特征做一个文本卷积网络然后通过一个全连接层把电影id电影类型映射到1*200的电影特征，
最后用一个隐语义模型对用户特征和电影特征做一个预测评分
最后用（MSE均方误差）对真是评分和预测评分进行比较，
做出判断要不要给用户进行推送

surprise:
是基于Python的推荐系统库
简单易用同时支持多种推荐算法
基于近邻的方法协同过滤可以设定不同的度量准则
支持不同的苹果准则
嵌入自己的数据集
使用不同的推荐算法进行建模比较
用协同过滤构建模型并进行预测
















